#### These values need changing to suit the station environment ####
#
gda.factory.factoryName 	= id18
gda.factory.allowExceptionInConfigure=true
gda.oe.oefactory        	= remote
gda.objectserver.xml    	= ${gda.config}/servers/main/${gda.mode}/id18-server.xml
gda.gui.beans.xml           = ${gda.config}/clients/main/${gda.mode}/id18-client.xml

#
# for rbac
gda.accesscontrol.useAccessControl = true
# if set to true then the BatonPanel MUST be used in the GUI to exchange and control the baton
gda.accesscontrol.useBatonControl = true
# this must not be set to less than 1 or baton passing will not work
gda.accesscontrol.defaultAuthorisationLevel = 1
gda.accesscontrol.defaultStaffAuthorisationLevel = 3 
gda.accesscontrol.firstClientTakesBaton = true
## Login Authentication
#gda.gui.AcquisitionGUI.authenticationMethod = gda.jython.authenticator.LdapAuthenticator
#gda.gui.AcquisitionGUI.authorisationMethod = gda.jython.authoriser.LdapAuthoriser


# GDA logging configuration parameters. The client port must match with the port
# setting in SocketAppender element of the LogServer.xml. If client port is not 
# set here, the default port is 6001 in AcquisitionGUI.java. The server port must also match 
# with the port number in SocketAppender element of the 
# ServerLoggingConfiguration.xml. If server port is not set here, the default
# port is 6000 in LogServer.java.

# port used by client log panel to receive messages - normally from logserver
gda.client.logging.port = 6789
# port used by logserver to receive messages
gda.server.logging.port = 6788
# port used by logPanel application to receive messages - normally from logserver
gda.logPanel.logging.port=6790

# configuration for messages originating from the client
gda.client.logging.xml = ${gda.config}/clients/main/${gda.mode}/id18-logging-configuration.xml
# configuration for messages originating from the object server
gda.server.logging.xml = ${gda.config}/servers/main/${gda.mode}/id18-logging-configuration.xml
# configuration for messages received by the client via gda.client.logging.port - normally only sends messages to the client's log panel
gda.clientLogService.logging.xml= ${gda.config}/clients/main/${gda.mode}/id18-client-log-service.xml
# configuration for messages received by the log server via gda.server.logging.port
gda.logserver.xml = ${gda.config}/servers/main/dummy/id18-log-server.xml
#configuration for messages received by the logPanel application via gda.logPanel.logging.port
gda.logPanel.logging.xml= ${gda.config}/clients/main/${gda.mode}/id18-log-panel.xml

# Documentation
gda.help.manual=http://doc.diamond.ac.uk/Documentation/GDA-manual.html
gda.bugReport.site=http://trac.diamond.ac.uk/beam/login
#gda.beamline.manual=http://intranet.diamond.ac.uk/id18Manual.html
#gda.feature.request=mailto:gda-support@dl.ac.uk
#
## Next are settings for scripting ##
#
#
## First three must point to the users' directory ##
#
gda.var                             = ${gda.config}/var
gda.logs.dir						= /home/gm/users/logs
gda.rcp.workspace                   = /home/gm/users/aps
gda.data.scan.datawriter.datadir	= /home/gm/users/data/$subdirectory$
gda.jython.translator.class 	 	= GeneralTranslator
gda.data.filePrefix                 = r
#gda.data.scan.datawriter.dataFormat = SrsDataFile
gda.data.scan.datawriter.dataFormat = NexusDataWriter
gda.jython.socket=1234

# Command to run at the end of a scan.
#gda.scan.executeAtEnd = ls -al

# Configuration for NeXus writing
gda.nexus.backend        = HDF5
gda.nexus.beamlinePrefix = true
gda.nexus.createSRS      = false

#  Cap the memory used by the client's terminal textbox
gda.jython.jythonTerminal.textFieldCharactersCap = 100000
# And for the Message and Debug Panels
gda.util.LoggingPanels.textFieldCharactersCap = 100000


## The next three have constraints. srsStation cannot have more than 4  ##
## characters, srsProject and srsExperiment cannot have more than 8 ##
#
gda.data.scan.datawriter.srsStation     = biocat
gda.data.scan.datawriter.srsProject     = biocat
gda.data.scan.datawriter.srsExperiment  = biocat
#
# Settings for DDH 
#gda.ddh.xml = ${gda.root}/src/gda/ddh/ddh.xml
# Directory to use to store the run number.
#gda.data.scan.runNum = ${gda.config}/var/run/
#gda.data.numtracker = ${gda.config}/var
#
#
## Next three settings are for the jacorb CORBA event service ##
#
gda.ORBClass 	      = org.jacorb.orb.ORB
gda.ORBSingletonClass = org.jacorb.orb.ORBSingleton
gda.eventChannelName  = local.eventChannel
#

## Database and persistence settings

gda.util.persistence.database.dbpath	= ${gda.config}/var/gdaDatabase
gda.util.persistence.database.username	= gda
gda.util.persistence.database.password	= gda

# Following two to connect to external database
#gda.util.persistence.database.driver 	= org.apache.derby.jdbc.ClientDriver 
#gda.util.persistence.database.protocol = jdbc:derby://localhost:1527/

# These two to use embedded driver
#gda.util.persistence.database.driver	= org.apache.derby.jdbc.EmbeddedDriver
#gda.util.persistence.database.protocol	= jdbc:derby:



#
## Next are miscellaneaous settings for various file locations and options ##
#
gda.motordir              = ${gda.config}/var/motorPositions
gda.limitsdir		      = ${gda.config}/var/limitsAndOffset
gda.softlimits.save       = true

## Synoptic screen and script locations
gda.dal.screens = ${gda.config}/clients/main/synoptic/screens/
gda.dal.scripts = ${gda.config}/clients/main/synoptic/scripts/
g#da.dal.images = ${gda.root}/plugins/uk.ac.gda.dal/

#
# setting the primary screen for GDA GUI display - default is 0
#gda.screen.primary=0
# GDA GUI display configuration
# if fractionalSize defined, width/height will not be used
#gda.gui.fractionalSize      = 0.9
gda.gui.width=1440
gda.gui.height=900

# GDA coordinate system
# gda.coordinate.name = DLS-coordinate
# dl.coordinate.name = SRS-coordinate
#
# GDA Device Drive Unit System
# gda.unit.name = DLS-unit



## Controls saving of metadata to Nexus files and data files to SRB
## server xml requires <FindableHashtable> entry for state communication
gda.data.nexusMetadata = false
gda.data.srbStore = false

# Metadata
gda.instrument      = biocat
gda.facility        = APS
gda.facility.probe  = x-ray
gda.facility.type   = Synchrotron X-ray Source

# Metadata values that would normally be read from ICAT
# (just define them as properties so that we don't need an ICAT!)
gda.icat.visit = sc666-0
gda.icat.proposal = 666
gda.icat.title = GDA base simulation

# Default values
gda.defVisit = 0-0


gda.jython.namespaceMappingFile = ${gda.jython.gdaScriptDir}/jythonNamespaceMapping
gda.jython.beamlineParametersFile = ${gda.jython.gdaScriptDir}/beamlineParameters
gda.jython.finderNameMappingFile = ${gda.jython.gdaScriptDir}/finderNameMapping

gda.beamline.name=biocat

# Port on which the HTTP server should listen. This is only used when creating
# a Jetty HTTP server in a Spring beans configuration file
# (e.g. stnBase_server_beans.xml).
gda.server.port=localhost

gda.nexus.instrumentApi=true